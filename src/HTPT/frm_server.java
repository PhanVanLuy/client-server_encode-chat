/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HTPT;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

/**
 *
 * @author ACER
 */
public class frm_server extends javax.swing.JFrame {
    public  static HashMap<DatagramPacket,String> listEncode;//follow list address-code
//    static Map<HashMap,Integer> listTime;
    static int host ;
    static InetAddress address;
    static int port;
    DatagramSocket socket;
    String typeEncode;
    ThuatToanDES dES;
    ThuatToanRSA rSA;
    
    ThuatToanAES aES;
    String Key;
   
    /**
     * Creates new form frm_server
     */
    public frm_server() throws SocketException {
        initComponents();  
        host=Integer.parseInt(tf_port.getText()) ;
        typeEncode="";
        dES= new ThuatToanDES();
        rSA= new ThuatToanRSA();
        
        aES= new ThuatToanAES();
        Key="ABC";
        
        ta_Chat.setEditable(false);
        socket = new DatagramSocket(host);
        tf_port.setText(String.valueOf(host));
         
        tf_Type.setEnabled(false);
        btn_ToClient.setEnabled(false);
        
        listEncode = new HashMap<>();
//        listTime= new HashMap<>() ;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btn_RunServer = new javax.swing.JButton();
        lb_ServerStatus = new javax.swing.JLabel();
        tf_port = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_Chat = new javax.swing.JTextArea();
        btn_ToClient = new javax.swing.JButton();
        tf_Type = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(150, 400));
        setResizable(false);
        setSize(new java.awt.Dimension(726, 370));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel1.setText("CLIENT-SERVER WITH UDP ");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setText("SERVER");

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Nhóm:");

        jLabel3.setText("Đỗ Tấn Thành");

        jLabel4.setText("Nguyễn Lê Tấn Tài");

        jLabel5.setText("Phan Văn Lũy");

        jLabel11.setText("Nguyễn Hải Đăng");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel11))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jLabel10)
                        .addContainerGap(218, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Function"));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connection from client", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel7.setText("Port server:");

        btn_RunServer.setText("Run Server");
        btn_RunServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RunServerActionPerformed(evt);
            }
        });

        lb_ServerStatus.setText("(Server is not running)");

        tf_port.setText("1234");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(btn_RunServer, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_ServerStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_port, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(btn_RunServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_ServerStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tf_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(180, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Send and receive message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        ta_Chat.setColumns(20);
        ta_Chat.setRows(5);
        jScrollPane2.setViewportView(ta_Chat);

        btn_ToClient.setText("To client");
        btn_ToClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ToClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(tf_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ToClient)
                        .addContainerGap(20, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ToClient))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ToClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ToClientActionPerformed
        String sendStr;
        String toChatScreen=tf_Type.getText();
        for (DatagramPacket t:listEncode.keySet())
        {
            sendStr="Server: "+tf_Type.getText();
            try {
                switch(listEncode.get(t).trim())
                {
                    case "AES":
                        sendStr=aES.maHoaAES(sendStr, Key);
                        break;
                    case "DES":
                        sendStr=dES.maHoaDES(sendStr);
                        break;
                    case "RSA":
                        sendStr=rSA.maHoaRSA(sendStr);
                        break;
                }
                if(!"".equals(sendStr))
                    send(socket, t.getAddress(), t.getPort(), sendStr);
            } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException | IOException ex) {
                Logger.getLogger(frm_server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        ta_Chat.setText(ta_Chat.getText()+toChatScreen+"\n");
        tf_Type.setText("");
         
    }//GEN-LAST:event_btn_ToClientActionPerformed

    private void btn_RunServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RunServerActionPerformed
        // TODO add your handling code here:
        if("".equals(tf_port.getText())) 
        {
            lb_ServerStatus.setText("Port can not be empty");
            return;
        }
        Thread t = new Thread() {
              @Override
              public void run() {
                  try {
                  server();
              } catch (IOException ex) {
                  Logger.getLogger(frm_server.class.getName()).log(Level.SEVERE, null, ex);
              }
              }
          };
        t.start();
        tf_Type.setEnabled(true);
        btn_ToClient.setEnabled(true);
        lb_ServerStatus.setText("Server is running...");
    }//GEN-LAST:event_btn_RunServerActionPerformed


    public static void  send(DatagramSocket socket, InetAddress address, int port, String sendString) throws IOException
    {
        byte sendData[];
        sendData=(sendString).getBytes();
        DatagramPacket sendPacket= new DatagramPacket(sendData, sendData.length, address, port);
        socket.send(sendPacket);
        
    }
    public static DatagramPacket receive(DatagramSocket socket) throws IOException
    {
        byte receiveData[]= new byte[8888];
        DatagramPacket receivePacket= new DatagramPacket(receiveData, receiveData.length);
        socket.receive(receivePacket);
        return receivePacket;
    }
    public void server() throws SocketException, IOException {
       
        byte[] receiveData;
        System.out.println("Server is listening");
        
        while(true){
            
            DatagramPacket receivePacket =receive(socket);
            address = receivePacket.getAddress();
            port = receivePacket.getPort();
            receiveData = receivePacket.getData();
            String receiveString = new String(receiveData).trim();
            System.out.println("receiveString: "+receiveString);
            String sendString;
            //Trong trường hợp bên client đã thoát thì xóa trong danh sách socket
            if(receiveString.equals("exit"))
            {
               
                for (DatagramPacket item:listEncode.keySet())
                { 
                    if(item.getAddress().equals(receivePacket.getAddress()) && item.getPort()==receivePacket.getPort())
                    {  
                        receivePacket=item;
                    }
                }
                listEncode.remove(receivePacket);
               
                 listEncode.keySet().stream().map((item) -> {
                System.out.println("type: "+listEncode.get(item));
                    return item;
                    }).forEachOrdered((item) -> {
                        System.out.println("Port: "+item.getPort());
                    });
                continue;
            }
            if (receiveString.equals("from client to server")) {
                try {
                    sendString = "Connect was successful!";
                    System.out.println("Connect was successful!");
                    System.out.flush();
                    send(socket, address, port, sendString);
                } catch (IOException ex) {
                    System.out.println("Connect was failed!");
                }
            }
            else {
                receiveString = new String(receivePacket.getData()).trim();
               
                String caseEncode[]=  receiveString.split("-");
                typeEncode=caseEncode[0];//Lưu loại mã hóa
                receiveString=caseEncode[1];//Lưu chuỗi đã được mã hóa
                
                switch(typeEncode)
                {
                    case "AES":
                        System.out.println("Sử dụng thuật toán AES");
                        receiveString= aES.giaiMaAES(receiveString,Key);
                        break;
                    case "DES":
                        System.out.println("Sử dụng thuật toán DES");
                        receiveString= dES.giaiMaDES(receiveString);
                        break;
                    case "RSA":
                        System.out.println("Sử dụng thuật toán RSA");
                        {
                            try {
                                receiveString= rSA.giaiMaRSA(receiveString);
                            } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException |
                                    NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {
                                System.err.println("Lỗi giải thuật RSA...");
                            }
                        }
                        break;
                }
                // thêm vào danh sách địa chỉ client
                checkAndPut(receivePacket,typeEncode);
                sendToTheOtherClient(receiveString);
                
                ta_Chat.setText(ta_Chat.getText()+receiveString+"\n");
            }
        }
    }
    public void checkAndPut(DatagramPacket packet, String type)
    {
         for (DatagramPacket item:listEncode.keySet())
         { 
             if(item.getAddress().equals(packet.getAddress()) && item.getPort()==packet.getPort())
             {  //trùng thì thay thế
                 listEncode.replace(item, type);
                 return;
             }
         }
         listEncode.put(packet, type);
         listEncode.keySet().stream().map((item) -> {
             System.out.println("type: "+listEncode.get(item));
            return item;
        }).forEachOrdered((item) -> {
            System.out.println("Port: "+item.getPort());
        });
    }
    public  void sendToTheOtherClient(String sendStr) throws IOException
    {
        String temStr=sendStr;
       for (DatagramPacket t:listEncode.keySet())
        {
            if(t.getAddress()!=address && t.getPort()!=port)
            {
                try {
                    switch(listEncode.get(t).trim())
                    {
                        case "AES":
                            temStr=aES.maHoaAES(sendStr, Key);
                            break;
                        case "DES":
                            temStr=dES.maHoaDES(sendStr);
                            break;
                        case "RSA":
                            temStr=rSA.maHoaRSA(sendStr);
                            break;
                    }
                    if(!"".equals(sendStr))
                        send(socket, t.getAddress(), t.getPort(), temStr);
                } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {
                    Logger.getLogger(frm_server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frm_server().setVisible(true);
                } catch (SocketException ex) {
                    Logger.getLogger(frm_server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_RunServer;
    private javax.swing.JButton btn_ToClient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lb_ServerStatus;
    private javax.swing.JTextArea ta_Chat;
    private javax.swing.JTextField tf_Type;
    private javax.swing.JTextField tf_port;
    // End of variables declaration//GEN-END:variables
}
